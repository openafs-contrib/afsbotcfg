---
- name: Manage OpenAFS buildbot master
  hosts: openafs_buildbot_masters
  tasks:

    # Setup role variable default values.
    - ansible.builtin.set_fact:
        afsbotcfg_master_home: "{{ ansible_user_dir }}"
      when: afsbotcfg_master_home is undefined
    - ansible.builtin.set_fact:
        afsbotcfg_master_basedir: "{{ afsbotcfg_master_home }}/master/{{ afsbotcfg_project.name | d('openafs') }}"
      when: afsbotcfg_master_basedir is undefined
    - ansible.builtin.set_fact:
        afsbotcfg_master_venv: "{{ afsbotcfg_master_home }}/.venv/buildbot"
      when: afsbotcfg_master_venv is undefined
    - ansible.builtin.set_fact:
        afsbotcfg_master_python: "/usr/bin/python3"
      when: afsbotcfg_master_python is undefined

    #--------------------------------------------------------------------------
    # Install the ssh keys for gerrit integration.
    #
    # Install the ssh keys required for gerrit event streaming and be sure
    # we have a host key to connect to gerrit without a prompt.
    #
    # The existing gerrit ssh key is a very old and weak key type. This requires
    # requires an ssh configuration setting to allow this weak key type.
    #--------------------------------------------------------------------------
    - name:  "Install the ssh keys for gerrit integration."
      when: afsbotcfg_gerrit is defined
      block:
        - name: "Ensure the .ssh directory exists."
          ansible.builtin.file:
            state: directory
            path: "{{ afsbotcfg_master_home }}/.ssh"
            mode: "0700"

        - name: "Ensure the ssh keys for gerrit are present."
          ansible.builtin.copy:
            src: "{{ afsbotcfg_gerrit.keysdir | d('files/ssh') }}/{{ item.src }}"
            dest: "{{ afsbotcfg_master_home }}/.ssh/{{ item.src | basename }}"
            mode: "{{ item.mode }}"
          loop:
            - src: "{{ afsbotcfg_gerrit.ident | d('gerrit') }}"
              mode: "0600"
            - src: "{{ afsbotcfg_gerrit.ident | d('gerrit') }}.pub"
              mode: "0644"

        - name: "Ensure the known_hosts file contains the gerrit server host key."
          vars:
            _hostkey_file: "{{ afsbotcfg_gerrit.keysdir | d('files/ssh') }}/{{ afsbotcfg_gerrit.hostkey | d('gerrit.hostkey') }}"
            _server: "{{ afsbotcfg_gerrit.server | d('gerrit.openafs.org') }}"
            _port: "{{ afsbotcfg_gerrit.ssh_port | d('29418') }}"
          ansible.builtin.known_hosts:
            state: present
            key: "{{ lookup('file', _hostkey_file) }}"
            name: "[{{ _server }}]:{{ _port }}"

        - name: "Ensure weak ssh key types are accepted."
          ansible.builtin.lineinfile:
            state: present
            path: ".ssh/config"
            line: "PubkeyAcceptedKeyTypes=+ssh-dss"
            create: yes
            mode: "0600"

    #--------------------------------------------------------------------------
    # Install our buildbot master extensions.
    #
    # Create the buildbot master Python virtualenv and install our afsbotcfg
    # package in the virtualenv before importing the buildbot master role.
    #--------------------------------------------------------------------------
    - ansible.builtin.assert:
        that:
          - afsbotcfg_version is defined
          - afsbotcfg_version | count > 0
        fail_msg: afsbotcfg_version is not set.
        success_msg: "afsbotcfg_version is {{ afsbotcfg_version }}"

    - name: "Create the buildbot master Python virtual environment."
      ansible.builtin.pip:
        state: present
        name:
          - pip
          - wheel
        virtualenv: "{{ afsbotcfg_master_venv }}"
        virtualenv_command: "{{ afsbotcfg_master_python }} -m venv"

    - name: "Query afsbotcfg installed version."
      vars:
        print_version: "import afsbotcfg; print(afsbotcfg.__version__)"
      ansible.builtin.command:
        cmd: "{{ afsbotcfg_master_venv }}/bin/python -c '{{ print_version }}'"
      changed_when: false
      failed_when: false
      register: results_afsbotcfg_version

    - ansible.builtin.set_fact:
        installed_afsbotcfg_version: "{{ results_afsbotcfg_version.stdout }}"

    - ansible.builtin.debug:
        var: installed_afsbotcfg_version

    - name: "Upload the afsbotcfg package tarball."
      ansible.builtin.copy:
        src: "src/dist/afsbotcfg-{{ afsbotcfg_version }}.tar.gz"
        dest: "/tmp/afsbotcfg-{{ afsbotcfg_version }}.tar.gz"
        mode: "0644"
      when: installed_afsbotcfg_version != afsbotcfg_version

    - name: "Install the afsbotcfg package."
      ansible.builtin.pip:
        # Do a forced re-installation in case we changed the code but
        # did not bother bumping the version.
        state: forcereinstall
        name: "file:///tmp/afsbotcfg-{{ afsbotcfg_version }}.tar.gz"
        virtualenv: "{{ afsbotcfg_master_venv }}"
        virtualenv_command: "{{ afsbotcfg_master_python }} -m venv"
      when: installed_afsbotcfg_version != afsbotcfg_version
      notify: "restart buildbot master instance"

    #--------------------------------------------------------------------------
    # Upload build-scripts.
    #
    # These are extra scripts downloaded by the master to workers to
    # facilitate package builds.
    #--------------------------------------------------------------------------
    - name: "Ensure build-scripts directory exists."
      ansible.builtin.file:
        state: directory
        path: "{{ afsbotcfg_master_basedir }}/build-scripts"
        mode: "0755"

    - name: "Upload build-scripts."
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ afsbotcfg_master_basedir }}/build-scripts/{{ item | basename }}"
        mode: "0755"
      with_fileglob: "files/build-scripts/*"
      register: upload_results

    #--------------------------------------------------------------------------
    # Install and configure the buildbot master.
    #--------------------------------------------------------------------------
    - name: "Determine if buildbot already installed"
      ansible.builtin.stat:
        path: ".local/bin/buildbot"
      register: buildbot_binary
    
    - ansible.builtin.set_fact:
        current_buildbot_version: "uninstalled"
      when: not buildbot_binary.stat.exists
      
    - name: "Prepare to upgrade buildbot"
      when: buildbot_binary.stat.exists
      block:
        - name: "Query current buildbot version"
          ansible.builtin.command:
            cmd: .local/bin/buildbot --version
          changed_when: false
          register: results_buildbot_current_version

        - name: "Set current buildbot version"
          set_fact:
            current_buildbot_version: "{{ results_buildbot_current_version.stdout_lines | join(' ') | \
                                          regex_replace('^.*Buildbot version:\\s*(?P<bbversion>[0-9.]+).*$', '==\\g<bbversion>') }}"

        - name: "Stop buildbot if upgrading"
          ansible.builtin.command:
            cmd: .local/bin/buildbotctl stop
          changed_when: false
          when: afsbotcfg_buildbot_version != current_buildbot_version
          notify: "restart buildbot master instance"

    - ansible.builtin.import_role:
        name: openafs_contrib.buildbot.buildbot_master
      vars:
        buildbot_master_home: "{{ afsbotcfg_master_home }}"
        buildbot_master_basedir: "{{ afsbotcfg_master_basedir }}"
        buildbot_master_venv: "{{ afsbotcfg_master_venv }}"
        buildbot_master_python: "{{ afsbotcfg_master_python }}"
        # We do not have sudo access on the upstream buildbot master.
        buildbot_master_have_sudo: False
        buildbot_master_sqlalchemy_version: "{{ afsbotcfg_sqlalchemy_version }}"
        buildbot_master_buildbot_version: "{{ afsbotcfg_buildbot_version }}"
        buildbot_project: "{{ afsbotcfg_project.name | d('openafs') }}"
        buildbot_master_config_templates:
          - "{{ playbook_dir }}/templates/master.cfg.j2"

    - name: "Update README file."
      ansible.builtin.template:
        src: README.j2
        dest: README
        mode: "0644"

  #--------------------------------------------------------------------------
  # Show buildbot master status.
  #--------------------------------------------------------------------------
  post_tasks:
    - name: "Query buildbot status."
      ansible.builtin.command:
        cmd: .local/bin/buildbotctl status
      changed_when: false
      register: results_buildbotctl_status

    - name: "Query buildbot version."
      ansible.builtin.command:
        cmd: .local/bin/buildbot --version
      changed_when: false
      register: results_buildbot_version

    - name: "Query afsbotcfg version."
      vars:
        print_version: "import afsbotcfg; print(afsbotcfg.__version__)"
      ansible.builtin.command:
        cmd: "{{ afsbotcfg_master_venv }}/bin/python -c '{{ print_version }}'"
      changed_when: false
      register: results_afsbotcfg_version

    - name: "Upgraded buildbot version or updated configuration"
      vars:
          _buildbot_org_vers: "Original buildbot version:  {{ current_buildbot_version }}"
          _buildbot_new_vers: "Requested buildbot version: {{ afsbotcfg_buildbot_version | d('not specified') }}"
          _afsbotcfg_org_vers: "Original afsbotcfg version:  {{ installed_afsbotcfg_version | d('not installed') }}"
          _afsbotcfg_new_vers: "Requested afsbotcfg version: {{ afsbotcfg_version }}"
      ansible.builtin.debug:
        msg: |
          {{ _buildbot_org_vers }}
          {{ _buildbot_new_vers }}
          {{ _afsbotcfg_org_vers }}
          {{ _afsbotcfg_new_vers }}
      when: afsbotcfg_buildbot_version != current_buildbot_version or installed_afsbotcfg_version != afsbotcfg_version

    - name: "Print versions."
      vars:
        _buildbot_status: "{{ results_buildbotctl_status.stdout }}"
        _buildbot_version: "{{ results_buildbot_version.stdout }}"
        _afsbotcfg_version: "afsbotcfg version: {{ results_afsbotcfg_version.stdout }}"
      ansible.builtin.debug:
        msg: |
          {{ _buildbot_status }}
          {{ _buildbot_version }}
          {{ _afsbotcfg_version }}
